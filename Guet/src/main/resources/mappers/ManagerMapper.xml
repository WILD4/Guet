<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 -->
<mapper namespace="Guet.dao.ManagerMapper">
    <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一
       resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表
     -->
    <delete id="removeStuInfo" parameterType="String">
      DELETE FROM student WHERE student_id = #{uid};
   </delete>

    <delete id="removeTeaInfo" parameterType="String">
      DELETE FROM teacher WHERE teacher_id = #{uid};
   </delete>

    <delete id="removeCourseInfo" parameterType="String">
      DELETE FROM course WHERE course_id = #{cid};
   </delete>

    <update id="updateLoginInfo">
        update login_info set login_date = now() where UID = #{uid};
    </update>

    <update id="changePassword">
        update login_info set password = #{password} WHERE uid = #{uid};
    </update>

    <update id="updateStuInfo" parameterType="Guet.pojo.StudentInfo">
        update student
        <trim prefix="set" suffixOverrides=",">
            <if test="studentInfo.UID != null"> student_id = #{studentInfo.UID}, </if>
            <if test="studentInfo.userName != null"> student_name = #{studentInfo.userName}, </if>
            <if test="studentInfo.userSex != null"> student_sex = #{studentInfo.userSex}, </if>
            <if test="studentInfo.userBirthday != null"> student_birthday = #{studentInfo.userBirthday}, </if>
            <if test="studentInfo.birthPlace != null"> birthplace = #{studentInfo.birthPlace}, </if>
        </trim>
        where student_id = #{uid};
    </update>

    <insert id="updateOrInsertStuInfo" parameterType="java.util.List" useGeneratedKeys="false">
        insert into student
        (student_id, student_name, student_sex, student_birthday, birthplace)
        values
        <foreach collection="stuInfoList" item="item" index="index" separator=",">
            (
                #{item.UID},
                #{item.userName},
                #{item.userSex},
                #{item.userBirthday},
                #{item.birthPlace}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            <trim suffixOverrides=",">
                <if test="item.UID != null"> student_id = VALUES(student_id), </if>
                <if test="item.userName != null"> student_name = VALUES(student_name), </if>
                <if test="item.userSex != null"> student_sex = VALUES(student_sex), </if>
                <if test="item.userBirthday != null"> student_birthday = VALUES(student_birthday), </if>
                <if test="item.birthPlace != null"> birthplace = VALUES(birthplace) </if>
            </trim>
    </insert>

    <insert id="updateOrInsertTeaInfo" parameterType="java.util.List" useGeneratedKeys="false">
        insert into teacher
        (teacher_id, teacher_name, teacher_sex, teacher_birthday,teacher_title,birthplace)
        values
        <foreach collection="teaInfoList" item="item" index="index" separator=",">
            (
            #{item.UID},
            #{item.userName},
            #{item.userSex},
            #{item.userBirthday},
            #{item.teacherTitle},
            #{item.birthPlace}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        <trim suffixOverrides=",">
            <if test="item.UID != null"> teacher_id = VALUES(teacher_id), </if>
            <if test="item.userName != null"> teacher_name = VALUES(teacher_name), </if>
            <if test="item.userSex != null"> teacher_sex = VALUES(teacher_sex), </if>
            <if test="item.userBirthday != null"> teacher_birthday = VALUES(teacher_birthday), </if>
            <if test="item.teacherTitle != null"> teacher_title = VALUES(teacher_title), </if>
            <if test="item.birthPlace != null"> birthplace = VALUES(birthplace) </if>
        </trim>
    </insert>

    <insert id="updateOrInsertCourseInfo" parameterType="java.util.List" useGeneratedKeys="false">
        insert into course
        (course_code, course_name, course_credit, course_date,course_type)
        values
        <foreach collection="couInfoList" item="item" index="index" separator=",">
            (
            #{item.courseCode},
            #{item.courseName},
            #{item.courseCredit},
            #{item.courseType},
            #{item.courseDate}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        <trim suffixOverrides=",">
            <if test="item.courseCode != null"> course_code = VALUES(course_code), </if>
            <if test="item.courseName != null"> course_name = VALUES(course_name), </if>
            <if test="item.courseCredit != null"> course_credit = VALUES(course_credit), </if>
            <if test="item.courseType != null"> course_date = VALUES(course_date), </if>
            <if test="item.courseDate != null"> course_type = VALUES(course_type), </if>
        </trim>
    </insert>

    <select id="queryAllStu" resultType="Guet.pojo.StudentInfo">
        SELECT * FROM student;
    </select>

    <select id="queryStuSumCredit" resultType="Guet.pojo.StudentInfo">
        		SELECT * FROM student,(SELECT student_id,sum(course_credit)sum_credit FROM course,tea_course,teacher,stu_course
		WHERE course.course_code IN(SELECT course_code FROM tea_course
				WHERE course_id IN(SELECT course_id FROM stu_course
						WHERE semester like #{semester}))
		AND stu_course.course_id = tea_course.course_id
		AND course.course_code = tea_course.course_code
		AND teacher.teacher_id = tea_course.teacher_id
		AND stu_course.grade >= 60 GROUP BY student_id)A WHERE A.student_id = student.student_id;
    </select>

    <select id="queryAllTea" resultType="Guet.pojo.TeacherInfo">
        SELECT * FROM teacher;
    </select>


    <select id="queryAllCourse" resultMap="courseInfo">
        SELECT * FROM course_manage_view;
    </select>

    <resultMap id="teacherInfo" type="Guet.pojo.TeacherInfo">
        <id column="teacher_id" property="teacherID"/>
        <collection property="courseIDs" ofType="String" select="getTeaCourseID" column="{uid = teacher_id}"/>
    </resultMap>

    <resultMap id="courseInfo" type="Guet.pojo.SelectedCourse" autoMapping="true">
        <id column="course_id" property="courseID"/>
        <!--association:完成子对象的映射-->
        <!--property:子对象在父对象中的属性名-->
        <!--javaType:子对象的java类型-->
        <!--autoMapping:完成子对象的自动映射，若开启驼峰，则按驼峰匹配-->
        <association property="courseInfo" javaType="Guet.pojo.CourseInfo" autoMapping="true">
            <id column="course_code" property="courseCode"/>
        </association>
        <association property="teacherInfo" javaType="Guet.pojo.TeacherInfo" autoMapping="true">
            <id column="teacher_id" property="teacherID"/>
        </association>
    </resultMap>

</mapper>
